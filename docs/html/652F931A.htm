<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>JsonSerialization Class</title><meta name="Title" content="JsonSerialization" /><meta name="Help.Id" content="T:Novacta.Analytics.JsonSerialization" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Novacta.Analytics" /><meta name="guid" content="652F931A" /><meta name="Description" content="Provides methods to support the JSON serialization of types defined in the namespace." /><meta name="tocFile" content="../toc/IDAE.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">Novacta.Analytics Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Json<wbr />Serialization Class</h1><div class="summary">
            Provides methods to support the JSON serialization of types
            defined in the <a href="2406EB43.htm">Novacta.Analytics</a> namespace.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="2406EB43.htm">Novacta.Analytics</a><br /><strong>Assembly:</strong> Novacta.Analytics (in Novacta.Analytics.dll) Version: 2.1.0+428f3840cfab98dda567bb0ed350b302533e273a<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">JsonSerialization</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">JsonSerialization</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">JsonSerialization</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">AbstractClassAttribute</span>&gt;]
[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">JsonSerialization</span> = <span class="keyword">class</span> <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">JsonSerialization</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDBCSection"><p>
            This class provides custom converters for the JSON serialization classes that 
            are defined in the <a href="https://learn.microsoft.com/dotnet/api/system.text.json" target="_blank" rel="noopener noreferrer">System.Text.Json</a> namespace. 
            </p><p>
            In particular, method <a href="4273C89F.htm">AddDataConverters(JsonSerializerOptions)</a> 
            adds to a given <a href="https://learn.microsoft.com/dotnet/api/system.text.json.jsonserializeroptions" target="_blank" rel="noopener noreferrer">JsonSerializerOptions</a> instance
            the converters required for the JSON serialization of the following types: 
            <a href="1DED9EB1.htm">DoubleMatrix</a>, <a href="9FFC4131.htm">ReadOnlyDoubleMatrix</a>, 
            <a href="AFDA21E4.htm">ComplexMatrix</a>, <a href="E2E3D527.htm">ReadOnlyComplexMatrix</a>, 
            <a href="E499D77C.htm">Category</a>,
            <a href="BFCDF326.htm">CategoricalVariable</a>, <a href="39D67B46.htm">CategoricalEntailment</a>, 
            and <a href="B39F799B.htm">CategoricalDataSet</a>.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDCCSection"><p>
            In the following example, a matrix instance is serialized by writing to
            a JSON value. Hence the matrix is deserialized by reading from
            such value.
            </p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Conversion of a matrix to and from a JSON value.</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using System;
using System.Text.Json;

namespace Novacta.Analytics.CodeExamples
{
    public class JsonSerializationExample0  
    {
        public void Main()
        {
            // Set matrix dimensions.
            const int numberOfRows = 3;
            const int numberOfColumns = 2;

            // Create the data as an array having lower bounds equal to zero.
            var data = new double[numberOfRows, numberOfColumns]
                { { 1, 2 },
                  { 3, 4 },
                  { 5, 6 } };

            // Create the matrix. 
            var serializedMatrix = DoubleMatrix.Dense(data);

            // Set the matrix name.
            serializedMatrix.Name = "MyData";

            // Set names for some rows and columns.
            serializedMatrix.SetRowName(0, "Row-0");
            serializedMatrix.SetRowName(2, "Row-2");
            serializedMatrix.SetColumnName(1, "Col-1");

            // Show the matrix.
            Console.WriteLine("Serialized matrix:");
            Console.WriteLine(serializedMatrix);
            Console.WriteLine();

            // Add converters to a JsonSerializerOptions instance
            // to support the JSON serialization of data types
            // defined in the Novacta.Analytics namespace.
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };
            JsonSerialization.AddDataConverters(options);

            // Create a JSON representation of the matrix.
            // The options previously defined must be passed as a parameter 
            // to method Serialize of class System.Text.Json.JsonSerializer.
            string json = JsonSerializer.Serialize(
                serializedMatrix,
                typeof(DoubleMatrix),
                options);

            // Show the JSON value representing the matrix.
            Console.WriteLine("JSON matrix representation:");
            Console.WriteLine(json);
            Console.WriteLine();

            // Create a matrix from the JSON representation.
            // The options previously defined must be passed as a parameter 
            // to method Deserialize of class System.Text.Json.JsonSerializer.
            var deserializedMatrix = JsonSerializer.Deserialize&lt;DoubleMatrix&gt;(
                json,
                options);

            // Show the deserialized matrix.
            Console.WriteLine("Deserialized matrix:");
            Console.WriteLine(deserializedMatrix);
        }
    }
}

// Executing method Main() produces the following output:
// 
// Serialized matrix:
//                                   [Col-1]          
// [Row-0]          1                2                
//                  3                4                
// [Row-2]          5                6                
// 
// 
// 
// JSON matrix representation:
// {
//   "Implementor": {
//     "StorageScheme": 0,
//     "NumberOfRows": 3,
//     "NumberOfColumns": 2,
//     "Storage": [
//       1,
//       3,
//       5,
//       2,
//       4,
//       6
//     ]
//   },
//   "Name": "MyData",
//   "RowNames": {
//     "0": "Row-0",
//     "2": "Row-2"
//   },
//   "ColumnNames": {
//     "1": "Col-1"
//   }
// }
// 
// Deserialized matrix:
//                                   [Col-1]          
// [Row-0]          1                2                
//                  3                4                
// [Row-2]          5                6                
// 
//</code></pre></div></div></p><p>
            In the following example, a categorical data set is converted to
            a JSON value. Hence the data set is instantiated by reading from
            such value.
            </p><p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Conversion of categorical data to and from a JSON value.</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Novacta.Analytics.CodeExamples
{
    public class JsonSerializationExample1  
    {
        public void Main()
        {
            // Create the feature variables.
            CategoricalVariable f0 = new("F-0")
                {
                    { 0, "A" },
                    { 1, "B" },
                    { 2, "C" },
                    { 3, "D" },
                    { 4, "E" }
                };
            f0.SetAsReadOnly();

            CategoricalVariable f1 = new("F-1")
                {
                    { 0, "I" },
                    { 1, "II" },
                    { 2, "III" },
                    { 3, "IV" }
                };
            f1.SetAsReadOnly();

            // Create the response variable.
            CategoricalVariable r = new("R")
                {
                    0,
                    1,
                    2
                };
            r.SetAsReadOnly();

            // Create a categorical data set containing
            // observations about such variables.
            List&lt;CategoricalVariable&gt; variables =
                [f0, f1, r];

            DoubleMatrix data = DoubleMatrix.Dense(
                new double[8, 3] {
                    { 0, 0, 0 },
                    { 0, 1, 0 },
                    { 1, 2, 2 },
                    { 1, 3, 2 },

                    { 2, 0, 1 },
                    { 3, 1, 1 },
                    { 4, 2, 1 },
                    { 4, 3, 1 } });

            CategoricalDataSet serializedDataSet = CategoricalDataSet.FromEncodedData(
                variables,
                data);

            // Set the data set name.
            serializedDataSet.Name = "MyData";

            // Add converters to a JsonSerializerOptions instance
            // to support the JSON serialization of data types
            // defined in the Novacta.Analytics namespace.
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };
            JsonSerialization.AddDataConverters(options);

            // Create a JSON representation of the data set.
            // The options previously defined must be passed as a parameter 
            // to method Serialize of class System.Text.Json.JsonSerializer.
            string json = JsonSerializer.Serialize(
                serializedDataSet,
                typeof(CategoricalDataSet),
                options);

            // Show the JSON value representing the data set.
            Console.WriteLine("JSON data set representation:");
            Console.WriteLine(json);
            Console.WriteLine();

            // Create a data set from the JSON representation.
            // The options previously defined must be passed as a parameter 
            // to method Deserialize of class System.Text.Json.JsonSerializer.
            var deserializedDataSet = JsonSerializer.Deserialize&lt;CategoricalDataSet&gt;(
                json,
                options);

            // Show the deserialized data set name.
            Console.WriteLine("Deserialized data set name:");
            Console.WriteLine(deserializedDataSet.Name);
        }
    }
}

// Executing method Main() produces the following output:
// 
// JSON data set representation:
// {
//   "Variables": [
//     {
//       "Name": "F-0",
//       "Categories": [
//         {
//           "Code": 0,
//           "Label": "A"
//         },
//         {
//           "Code": 1,
//           "Label": "B"
//         },
//         {
//           "Code": 2,
//           "Label": "C"
//         },
//         {
//           "Code": 3,
//           "Label": "D"
//         },
//         {
//           "Code": 4,
//           "Label": "E"
//         }
//       ],
//       "IsReadOnly": true
//     },
//     {
//       "Name": "F-1",
//       "Categories": [
//         {
//           "Code": 0,
//           "Label": "I"
//         },
//         {
//           "Code": 1,
//           "Label": "II"
//         },
//         {
//           "Code": 2,
//           "Label": "III"
//         },
//         {
//           "Code": 3,
//           "Label": "IV"
//         }
//       ],
//       "IsReadOnly": true
//     },
//     {
//       "Name": "R",
//       "Categories": [
//         {
//           "Code": 0,
//           "Label": "0"
//         },
//         {
//           "Code": 1,
//           "Label": "1"
//         },
//         {
//           "Code": 2,
//           "Label": "2"
//         }
//       ],
//       "IsReadOnly": true
//     }
//   ],
//   "Data": {
//     "Matrix": {
//       "Implementor": {
//         "StorageScheme": 0,
//         "NumberOfRows": 8,
//         "NumberOfColumns": 3,
//         "Storage": [
//           0,
//           0,
//           1,
//           1,
//           2,
//           3,
//           4,
//           4,
//           0,
//           1,
//           2,
//           3,
//           0,
//           1,
//           2,
//           3,
//           0,
//           0,
//           2,
//           2,
//           1,
//           1,
//           1,
//           1
//         ]
//       },
//       "Name": "MyData",
//       "RowNames": null,
//       "ColumnNames": {
//         "0": "F-0",
//         "1": "F-1",
//         "2": "R"
//       }
//     }
//   },
//   "Name": "MyData"
// }
// 
// Deserialized data set name:
// MyData</code></pre></div></div></p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDAEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="4273C89F.htm">AddDataConverters</a></td><td>
            Adds support to the JSON conversion of data types in the
            <a href="2406EB43.htm">Novacta.Analytics</a> namespace.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="2406EB43.htm">Novacta.Analytics Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright (c) Giovanni Lafratta.</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>