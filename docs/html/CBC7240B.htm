<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>CategoricalDataSet.Encode Method (TextReader, Char, IndexCollection, Boolean, Dictionary(Int32, Categorizer), IFormatProvider)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Novacta.Analytics.CategoricalDataSet.Encode(System.IO.TextReader,System.Char,Novacta.Analytics.IndexCollection,System.Boolean,System.Collections.Generic.Dictionary{System.Int32,Novacta.Analytics.Categorizer},System.IFormatProvider)" /><meta name="Description" content="Encodes categorical or numerical data from the stream underlying the specified text reader applying specific data categorizers." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Novacta.Analytics" /><meta name="file" content="CBC7240B" /><meta name="guid" content="CBC7240B" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Novacta.Analytics Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/a4ea75a2-ef53-4ea2-a7f4-b493a50f90b3.htm" title="Novacta.Analytics Documentation" tocid="roottoc">Novacta.Analytics Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/D9FC3C8F.htm" title="Novacta.Analytics namespaces" tocid="D9FC3C8F">Novacta.Analytics namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/2406EB43.htm" title="Novacta.Analytics" tocid="2406EB43">Novacta.Analytics</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/B39F799B.htm" title="CategoricalDataSet Class" tocid="B39F799B">CategoricalDataSet Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/E2AAB894.htm" title="CategoricalDataSet Methods" tocid="E2AAB894">CategoricalDataSet Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/77DAF585.htm" title="Encode Method " tocid="77DAF585">Encode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/B3BD81DC.htm" title="Encode Method (String, Char, IndexCollection, Boolean)" tocid="B3BD81DC">Encode Method (String, Char, IndexCollection, Boolean)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/A909324F.htm" title="Encode Method (TextReader, Char, IndexCollection, Boolean)" tocid="A909324F">Encode Method (TextReader, Char, IndexCollection, Boolean)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/11160D41.htm" title="Encode Method (String, Char, IndexCollection, Boolean, Dictionary(Int32, Categorizer), IFormatProvider)" tocid="11160D41">Encode Method (String, Char, IndexCollection, Boolean, Dictionary(Int32, Categorizer), IFormatProvider)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/CBC7240B.htm" title="Encode Method (TextReader, Char, IndexCollection, Boolean, Dictionary(Int32, Categorizer), IFormatProvider)" tocid="CBC7240B">Encode Method (TextReader, Char, IndexCollection, Boolean, Dictionary(Int32, Categorizer), IFormatProvider)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>CategoricalDataSet<span id="LST7ACA847D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_0?cpp=::|nu=.");</script>Encode Method (TextReader, Char, IndexCollection, Boolean, Dictionary<span id="LST7ACA847D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_1?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Int32, Categorizer<span id="LST7ACA847D_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_2?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, IFormatProvider)</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
             Encodes categorical or numerical data from the stream 
             underlying the specified text reader
             applying specific data categorizers.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="2406EB43.htm">Novacta.Analytics</a><br />
    <strong>Assembly:</strong>
   Novacta.Analytics (in Novacta.Analytics.dll) Version: 2.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cs','1','4');return false;">C#</a></div><div id="ID0EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','vb','2','4');return false;">VB</a></div><div id="ID0EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cpp','3','4');return false;">C++</a></div><div id="ID0EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">CategoricalDataSet</span> <span class="identifier">Encode</span>(
	<span class="identifier">TextReader</span> <span class="parameter">reader</span>,
	<span class="identifier">char</span> <span class="parameter">columnDelimiter</span>,
	<span class="identifier">IndexCollection</span> <span class="parameter">extractedColumns</span>,
	<span class="identifier">bool</span> <span class="parameter">firstLineContainsVariableNames</span>,
	<span class="identifier">Dictionary</span>&lt;<span class="identifier">int</span>, <span class="identifier">Categorizer</span>&gt; <span class="parameter">specialCategorizers</span>,
	<span class="identifier">IFormatProvider</span> <span class="parameter">provider</span>
)</pre></div><div id="ID0EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Encode</span> ( 
	<span class="parameter">reader</span> <span class="keyword">As</span> <span class="identifier">TextReader</span>,
	<span class="parameter">columnDelimiter</span> <span class="keyword">As</span> <span class="identifier">Char</span>,
	<span class="parameter">extractedColumns</span> <span class="keyword">As</span> <span class="identifier">IndexCollection</span>,
	<span class="parameter">firstLineContainsVariableNames</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>,
	<span class="parameter">specialCategorizers</span> <span class="keyword">As</span> <span class="identifier">Dictionary</span>(<span class="keyword">Of</span> <span class="identifier">Integer</span>, <span class="identifier">Categorizer</span>),
	<span class="parameter">provider</span> <span class="keyword">As</span> <span class="identifier">IFormatProvider</span>
) <span class="keyword">As</span> <span class="identifier">CategoricalDataSet</span></pre></div><div id="ID0EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">static</span> <span class="identifier">CategoricalDataSet</span>^ <span class="identifier">Encode</span>(
	<span class="identifier">TextReader</span>^ <span class="parameter">reader</span>, 
	<span class="identifier">wchar_t</span> <span class="parameter">columnDelimiter</span>, 
	<span class="identifier">IndexCollection</span>^ <span class="parameter">extractedColumns</span>, 
	<span class="identifier">bool</span> <span class="parameter">firstLineContainsVariableNames</span>, 
	<span class="identifier">Dictionary</span>&lt;<span class="identifier">int</span>, <span class="identifier">Categorizer</span>^&gt;^ <span class="parameter">specialCategorizers</span>, 
	<span class="identifier">IFormatProvider</span>^ <span class="parameter">provider</span>
)</pre></div><div id="ID0EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">Encode</span> : 
        <span class="parameter">reader</span> : <span class="identifier">TextReader</span> * 
        <span class="parameter">columnDelimiter</span> : <span class="identifier">char</span> * 
        <span class="parameter">extractedColumns</span> : <span class="identifier">IndexCollection</span> * 
        <span class="parameter">firstLineContainsVariableNames</span> : <span class="identifier">bool</span> * 
        <span class="parameter">specialCategorizers</span> : <span class="identifier">Dictionary</span>&lt;<span class="identifier">int</span>, <span class="identifier">Categorizer</span>&gt; * 
        <span class="parameter">provider</span> : <span class="identifier">IFormatProvider</span> <span class="keyword">-&gt;</span> <span class="identifier">CategoricalDataSet</span> 
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">reader</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.io.textreader" target="_blank" rel="noopener noreferrer">System.IO<span id="LST7ACA847D_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>TextReader</a><br />
             The reader having access to the data stream.</dd><dt><span class="parameter">columnDelimiter</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.char" target="_blank" rel="noopener noreferrer">System<span id="LST7ACA847D_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Char</a><br />
             The delimiter used to separate columns in data lines.</dd><dt><span class="parameter">extractedColumns</span></dt><dd>Type: <a href="9B3BDFD7.htm">Novacta.Analytics<span id="LST7ACA847D_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>IndexCollection</a><br />
             The zero-based indexes of the columns from which 
             data are to be extracted.</dd><dt><span class="parameter">firstLineContainsVariableNames</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.boolean" target="_blank" rel="noopener noreferrer">System<span id="LST7ACA847D_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_6?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Boolean</a><br />
             If set to <span class="code">true</span> signals that the first
             line contains variable names.</dd><dt><span class="parameter">specialCategorizers</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.collections.generic.dictionary-2" target="_blank" rel="noopener noreferrer">System.Collections.Generic<span id="LST7ACA847D_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_7?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Dictionary</a><span id="LST7ACA847D_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_8?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a>, <a href="DCD02766.htm">Categorizer</a><span id="LST7ACA847D_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_9?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />
             A mapping from a subset of extracted column indexes to 
             a set of categorizers, to be executed when extracting 
             data from the corresponding columns.</dd><dt><span class="parameter">provider</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.iformatprovider" target="_blank" rel="noopener noreferrer">System<span id="LST7ACA847D_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_10?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>IFormatProvider</a><br />
             An object that provides formatting information to
             parse numeric values.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="B39F799B.htm">CategoricalDataSet</a><br />The dataset containing information about the
             streamed data.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="tableSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank" rel="noopener noreferrer">ArgumentNullException</a></td><td><span class="parameter">reader</span> is <b>null</b>. <br />
             -or- <br /><span class="parameter">extractedColumns</span>  is <b>null</b>. <br />
             -or- <br /><span class="parameter">specialCategorizers</span> is <b>null</b>. <br />
             -or- <br /><span class="parameter">provider</span> is <b>null</b>.
             </td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noopener noreferrer">ArgumentException</a></td><td><span class="parameter">specialCategorizers</span> contains <b>null</b> values 
             or keys which are
             not in the <span class="parameter">extractedColumns</span> collection.
             </td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.io.invaliddataexception" target="_blank" rel="noopener noreferrer">InvalidDataException</a></td><td>
             There are no data rows in the stream accessed by 
             <span class="parameter">reader</span>. <br /> 
             -or- <br />
             There is at least a row
             which contains not enough data for any column specified by 
             <span class="parameter">extractedColumns</span>. This can happen if 
             there are missing columns, 
             or if strings representing variable names or category labels,
             i.e. tokens extracted 
             from the stream or returned by a special categorizer, are <b>null</b> 
             or consist only of white-space characters. 
             In some cases, the <a href="https://docs.microsoft.com/dotnet/api/system.exception.innerexception#System_Exception_InnerException" target="_blank" rel="noopener noreferrer">InnerException</a> 
             property is set to add 
             further details about the occurred error.
             </td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID3RBSection" class="collapsibleSection"><p><b>Data Extraction</b></p><p>
             Each line from the stream is interpreted as the information about 
             variables
             observed at a given instance. A line is split in tokens, 
             each corresponding
             to a (zero-based) column, which in turn stores the data
             of a given variable. Columns are assumed to be
             separated each other by the character passed as 
             <span class="parameter">columnDelimiter</span>.
             Data from a variable are extracted only if the corresponding 
             column index is in the 
             collection <span class="parameter">extractedColumns</span>. 
             </p><p><b>Special Categorization</b></p><p>
             By default, tokens in a column are interpreted as 
             category labels of the corresponding variable, which is 
             inserted in the 
             dataset as such. This behavior can be overridden by mapping 
             a special categorizer
             to a given column by inserting, in the dictionary 
             <span class="parameter">specialCategorizers</span>, the categorizer as
             a value keyed with the 
             index of the column whose data are to be categorized. 
             A special categorizer can be
             useful if a given column corresponds to a numerical variable 
             which must be 
             discretized before its insertion in the dataset.
             For categorizers obtained
             by entropy minimization, 
             see, for example, 
             <a href="5D736549.htm">CategorizeByEntropyMinimization(TextReader, Char, IndexCollection, Boolean, Int32, IFormatProvider)</a>.
             </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
            In the following example, a stream contains two columns, 
            the first corresponding to a numerical variable,
            and the second to a categorical one, which is interpreted 
            as the target.
            A special categorizer, obtained by intra interval entropy 
            minimization, is assigned to
            the first column to discretize its data, then both columns 
            are encoded in a categorical dataset.
            </p><p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAACFBA_tab1" class="codeSnippetContainerTabSingle">Categorizing numerical data by intra interval entropy minimization and
subsequent encoding in a categorical dataset</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACFBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAACFBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAACFBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Globalization;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">namespace</span> Novacta.Analytics.CodeExamples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CategoricalEncodeExample1  
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Create a data stream.</span>
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> numberOfInstances = <span class="highlight-number">27</span>;
            <span class="highlight-keyword">string</span>[] data = <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[numberOfInstances + <span class="highlight-number">1</span>] {
            <span class="highlight-literal">"NUMERICAL,TARGET"</span>,
            <span class="highlight-literal">"0,A"</span>,
            <span class="highlight-literal">"0,A"</span>,
            <span class="highlight-literal">"0,A"</span>,
            <span class="highlight-literal">"1,B"</span>,
            <span class="highlight-literal">"1,B"</span>,
            <span class="highlight-literal">"1,B"</span>,
            <span class="highlight-literal">"1,B"</span>,
            <span class="highlight-literal">"2,B"</span>,
            <span class="highlight-literal">"2,B"</span>,
            <span class="highlight-literal">"3,C"</span>,
            <span class="highlight-literal">"3,C"</span>,
            <span class="highlight-literal">"3,C"</span>,
            <span class="highlight-literal">"4,B"</span>,
            <span class="highlight-literal">"4,B"</span>,
            <span class="highlight-literal">"4,B"</span>,
            <span class="highlight-literal">"4,C"</span>,
            <span class="highlight-literal">"5,A"</span>,
            <span class="highlight-literal">"5,A"</span>,
            <span class="highlight-literal">"6,A"</span>,
            <span class="highlight-literal">"7,C"</span>,
            <span class="highlight-literal">"7,C"</span>,
            <span class="highlight-literal">"7,C"</span>,
            <span class="highlight-literal">"8,C"</span>,
            <span class="highlight-literal">"8,C"</span>,
            <span class="highlight-literal">"9,C"</span>,
            <span class="highlight-literal">"9,C"</span>,
            <span class="highlight-literal">"9,C"</span> };

            MemoryStream stream = <span class="highlight-keyword">new</span>();
            StreamWriter writer = <span class="highlight-keyword">new</span>(stream);
            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; data.Length; i++) {
                writer.WriteLine(data[i].ToCharArray());
                writer.Flush();
            }
            stream.Position = <span class="highlight-number">0</span>;

            <span class="highlight-comment">// Identify the special categorizer for variable NUMERICAL.</span>
            StreamReader streamReader = <span class="highlight-keyword">new</span>(stream);
            <span class="highlight-keyword">char</span> columnDelimiter = <span class="highlight-literal">','</span>;
            IndexCollection numericalColumns = IndexCollection.Range(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
            <span class="highlight-keyword">bool</span> firstLineContainsColumnHeaders = <span class="highlight-keyword">true</span>;
            <span class="highlight-keyword">int</span> targetColumn = <span class="highlight-number">1</span>;
            IFormatProvider provider = CultureInfo.InvariantCulture;
            <span class="highlight-keyword">var</span> specialCategorizers = CategoricalDataSet.CategorizeByEntropyMinimization(
                streamReader,
                columnDelimiter,
                numericalColumns,
                firstLineContainsColumnHeaders,
                targetColumn,
                provider);

            <span class="highlight-comment">// Encode the categorical data set using the special categorizer.</span>
            stream.Position = <span class="highlight-number">0</span>;
            IndexCollection extractedColumns = IndexCollection.Range(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>);
            CategoricalDataSet dataset = CategoricalDataSet.Encode(
                streamReader,
                columnDelimiter,
                extractedColumns,
                firstLineContainsColumnHeaders,
                specialCategorizers,
                provider);

            <span class="highlight-comment">// Decode and show the data set.</span>
            Console.WriteLine(<span class="highlight-literal">"Decoded data set:"</span>);
            Console.WriteLine();
            <span class="highlight-keyword">var</span> decodedDataSet = dataset.Decode();
            <span class="highlight-keyword">int</span> numberOfVariables = dataset.Data.NumberOfColumns;

            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> variable <span class="highlight-keyword">in</span> dataset.Variables) {
                Console.Write(variable.Name + <span class="highlight-literal">","</span>);
            }
            Console.WriteLine();

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; numberOfInstances; i++) {
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt; numberOfVariables; j++) {
                    Console.Write(decodedDataSet[i][j] + <span class="highlight-literal">","</span>);
                }
                Console.WriteLine();
            }
        }
    }
}

<span class="highlight-comment">// Executing method Main() produces the following output:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Decoded data set:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// NUMERICAL,TARGET,</span>
<span class="highlight-comment">// ]-Inf, 2.5],A,</span>
<span class="highlight-comment">// ]-Inf, 2.5],A,</span>
<span class="highlight-comment">// ]-Inf, 2.5],A,</span>
<span class="highlight-comment">// ]-Inf, 2.5],B,</span>
<span class="highlight-comment">// ]-Inf, 2.5],B,</span>
<span class="highlight-comment">// ]-Inf, 2.5],B,</span>
<span class="highlight-comment">// ]-Inf, 2.5],B,</span>
<span class="highlight-comment">// ]-Inf, 2.5],B,</span>
<span class="highlight-comment">// ]-Inf, 2.5],B,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,B,</span>
<span class="highlight-comment">// ]2.5, Inf[,B,</span>
<span class="highlight-comment">// ]2.5, Inf[,B,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,A,</span>
<span class="highlight-comment">// ]2.5, Inf[,A,</span>
<span class="highlight-comment">// ]2.5, Inf[,A,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span>
<span class="highlight-comment">// ]2.5, Inf[,C,</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACFBA");</script></p><p>
             In the following example, a data stream is read to encode
             a categorical dataset.
             The stream contains two columns, the first corresponding 
             to a categorical variable, 
             and the second to a numerical one. A special categorizer 
             is assigned to the second column 
             to discretize its data.
            </p><p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAFBA_tab1" class="codeSnippetContainerTabSingle">Encoding a categorical dataset from a stream containing both categorical and 
             numerical data</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAFBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAAFBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAFBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> System.Globalization;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">namespace</span> Novacta.Analytics.CodeExamples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CategoricalEncodeExample0  
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Create a data stream.</span>
            <span class="highlight-keyword">string</span>[] data = <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[<span class="highlight-number">6</span>] {
            <span class="highlight-literal">"COLOR,NUMBER"</span>,
            <span class="highlight-literal">"Red,  -2.2"</span>,
            <span class="highlight-literal">"Green, 0.0"</span>,
            <span class="highlight-literal">"Red,  -3.3"</span>,
            <span class="highlight-literal">"Black,-1.1"</span>,
            <span class="highlight-literal">"Black, 4.4"</span> };

            MemoryStream stream = <span class="highlight-keyword">new</span>();
            StreamWriter writer = <span class="highlight-keyword">new</span>(stream);
            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; data.Length; i++) {
                writer.WriteLine(data[i].ToCharArray());
                writer.Flush();
            }
            stream.Position = <span class="highlight-number">0</span>;

            <span class="highlight-comment">// Define a special categorizer for variable NUMBER</span>
            <span class="highlight-comment">// using a local function.</span>
            <span class="highlight-keyword">static</span> <span class="highlight-keyword">string</span> numberCategorizer(<span class="highlight-keyword">string</span> token, IFormatProvider provider)
            {
                <span class="highlight-keyword">double</span> datum = Convert.ToDouble(token, provider);
                <span class="highlight-keyword">if</span> (datum == <span class="highlight-number">0</span>)
                {
                    <span class="highlight-keyword">return</span> <span class="highlight-literal">"Zero"</span>;
                }
                <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (datum &lt; <span class="highlight-number">0</span>)
                {
                    <span class="highlight-keyword">return</span> <span class="highlight-literal">"Negative"</span>;
                }
                <span class="highlight-keyword">else</span>
                {
                    <span class="highlight-keyword">return</span> <span class="highlight-literal">"Positive"</span>;
                }
            }

            <span class="highlight-comment">// Attach the special categorizer to variable NUMBER.</span>
            <span class="highlight-keyword">int</span> numberColumnIndex = <span class="highlight-number">1</span>;
            <span class="highlight-keyword">var</span> specialCategorizers = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">int</span>, Categorizer&gt;
            {
                { numberColumnIndex, numberCategorizer }
            };

            <span class="highlight-comment">// Encode the categorical data set.</span>
            StreamReader streamReader = <span class="highlight-keyword">new</span>(stream);
            <span class="highlight-keyword">char</span> columnDelimiter = <span class="highlight-literal">','</span>;
            IndexCollection extractedColumns = IndexCollection.Range(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>);
            <span class="highlight-keyword">bool</span> firstLineContainsColumnHeaders = <span class="highlight-keyword">true</span>;
            CategoricalDataSet dataset = CategoricalDataSet.Encode(
                streamReader,
                columnDelimiter,
                extractedColumns,
                firstLineContainsColumnHeaders,
                specialCategorizers,
                CultureInfo.InvariantCulture);

            <span class="highlight-comment">// Decode and show the data set.</span>
            Console.WriteLine(<span class="highlight-literal">"Decoded data set:"</span>);
            Console.WriteLine();
            <span class="highlight-keyword">var</span> decodedDataSet = dataset.Decode();
            <span class="highlight-keyword">int</span> numberOfInstances = dataset.Data.NumberOfRows;
            <span class="highlight-keyword">int</span> numberOfVariables = dataset.Data.NumberOfColumns;

            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> variable <span class="highlight-keyword">in</span> dataset.Variables) {
                Console.Write(variable.Name + <span class="highlight-literal">","</span>);
            }
            Console.WriteLine();

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; numberOfInstances; i++) {
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt; numberOfVariables; j++) {
                    Console.Write(decodedDataSet[i][j] + <span class="highlight-literal">","</span>);
                }
                Console.WriteLine();
            }
        }
    }
}

<span class="highlight-comment">// Executing method Main() produces the following output:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Decoded data set:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// COLOR,NUMBER,</span>
<span class="highlight-comment">// Red,Negative,</span>
<span class="highlight-comment">// Green,Zero,</span>
<span class="highlight-comment">// Red,Negative,</span>
<span class="highlight-comment">// Black,Negative,</span>
<span class="highlight-comment">// Black,Positive,</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAFBA");</script></p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="B39F799B.htm">CategoricalDataSet Class</a></div><div class="seeAlsoStyle"><a href="77DAF585.htm">Encode Overload</a></div><div class="seeAlsoStyle"><a href="2406EB43.htm">Novacta.Analytics Namespace</a></div><div class="seeAlsoStyle"><a href="5D736549.htm">CategoricalDataSet<span id="LST7ACA847D_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_11?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CategorizeByEntropyMinimization(TextReader, Char, IndexCollection, Boolean, Int32, IFormatProvider)</a></div><div class="seeAlsoStyle"><a href="DCD02766.htm">Novacta.Analytics<span id="LST7ACA847D_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7ACA847D_12?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Categorizer</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright (c) Giovanni Lafratta.</p> </div></body></html>