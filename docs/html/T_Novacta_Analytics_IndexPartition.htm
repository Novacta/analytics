<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>IndexPartition Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="IndexPartition class" /><meta name="System.Keywords" content="Novacta.Analytics.IndexPartition class" /><meta name="Microsoft.Help.F1" content="Novacta.Analytics.IndexPartition" /><meta name="Microsoft.Help.Id" content="T:Novacta.Analytics.IndexPartition" /><meta name="Description" content="Provides static methods for creating index partition objects and for their evaluation in terms of linkage among parts." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Novacta.Analytics" /><meta name="file" content="T_Novacta_Analytics_IndexPartition" /><meta name="guid" content="T_Novacta_Analytics_IndexPartition" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Novacta.Analytics Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/a4ea75a2-ef53-4ea2-a7f4-b493a50f90b3.htm" title="Novacta.Analytics Documentation" tocid="roottoc">Novacta.Analytics Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/G_Novacta_Analytics.htm" title="Novacta.Analytics Namespaces" tocid="G_Novacta_Analytics">Novacta.Analytics Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Novacta_Analytics.htm" title="Novacta.Analytics" tocid="N_Novacta_Analytics">Novacta.Analytics</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Novacta_Analytics_IndexPartition.htm" title="IndexPartition Class" tocid="T_Novacta_Analytics_IndexPartition">IndexPartition Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Novacta_Analytics_IndexPartition.htm" title="IndexPartition Methods" tocid="Methods_T_Novacta_Analytics_IndexPartition">IndexPartition Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>IndexPartition Class</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
             Provides static methods for creating index partition objects and for their
             evaluation in terms of linkage among parts.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">System<span id="LSTA9E5B029_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Novacta.Analytics<span id="LSTA9E5B029_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>IndexPartition</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Novacta_Analytics.htm">Novacta.Analytics</a><br />
    <strong>Assembly:</strong>
   Novacta.Analytics (in Novacta.Analytics.dll) Version: 1.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cs','1','4');return false;">C#</a></div><div id="ID1EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','vb','2','4');return false;">VB</a></div><div id="ID1EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cpp','3','4');return false;">C++</a></div><div id="ID1EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">IndexPartition</span></pre></div><div id="ID1EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">IndexPartition</span></pre></div><div id="ID1EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">IndexPartition</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span></pre></div><div id="ID1EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">[&lt;<span class="identifier">AbstractClassAttribute</span>&gt;]
[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">IndexPartition</span> =  <span class="keyword">class</span> <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EDCA");</script></div><p>The <span class="selflink">IndexPartition</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Novacta_Analytics_IndexPartition_Create.htm">Create(DoubleMatrix)</a></td><td><div class="summary">
            Creates a partition of positions in a collection of 
            <a href="https://docs.microsoft.com/dotnet/api/system.double" target="_blank">Double</a> elements by 
            aggregating those positions occupied by a same element.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Novacta_Analytics_IndexPartition_Create_1.htm">Create(DoubleMatrixRowCollection)</a></td><td><div class="summary">
            Creates a partition of positions in a collection of 
            <a href="T_Novacta_Analytics_DoubleMatrixRow.htm">DoubleMatrixRow</a> 
            elements by 
            aggregating those positions occupied by a same element.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Novacta_Analytics_IndexPartition_Create__1_1.htm">Create<span id="LSTA9E5B029_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTA9E5B029_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(IEnumerable<span id="LSTA9E5B029_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_4?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTA9E5B029_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_5?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Creates a partition of positions in a collection of elements by 
            aggregating those positions occupied by a same element.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Novacta_Analytics_IndexPartition_Create__1.htm">Create<span id="LSTA9E5B029_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_6?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTA9E5B029_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_7?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(IndexCollection, Func<span id="LSTA9E5B029_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_8?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Int32, T<span id="LSTA9E5B029_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_9?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Creates a partition of the elements in 
            an <a href="T_Novacta_Analytics_IndexCollection.htm">IndexCollection</a> instance by 
            aggregating those elements corresponding to a same part.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Novacta_Analytics_IndexPartition_DaviesBouldinIndex.htm">DaviesBouldinIndex</a></td><td><div class="summary">
            Computes the Davies-Bouldin index to assess the quality of a given partition
            of the specified data.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Novacta_Analytics_IndexPartition_DunnIndex.htm">DunnIndex</a></td><td><div class="summary">
             Computes the Dunn index to assess the quality of a given partition
             of the specified data.
             </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Novacta_Analytics_IndexPartition_MinimumCentroidLinkage.htm">MinimumCentroidLinkage</a></td><td><div class="summary">
            Computes the minimum centroid linkage among parts
            in the given partition of the specified data.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
             An index partition is a data structure that has a specific number of
             parts. Each part is a collection of zero-based indexes represented by 
             an instance of type <a href="T_Novacta_Analytics_IndexCollection.htm">IndexCollection</a>,
             and has an 
             identifier whose type is a generic parameter. 
             In its general form, an index partition can be constructed on the base
             of an <a href="T_Novacta_Analytics_IndexCollection.htm">IndexCollection</a> instance: each index in the collection
             is passed to a <a href="https://docs.microsoft.com/dotnet/api/system.func-2" target="_blank">Func<span id="LSTA9E5B029_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_10?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T, TResult<span id="LSTA9E5B029_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_11?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> object, which returns a
             value of type &lt;T&gt;, so that the indexes for which is returned the same
             value are inserted in the same part having such value as its identifier.
             This is the way an index partition is built by method
             <a href="M_Novacta_Analytics_IndexPartition_Create__1.htm">Create<span id="LSTA9E5B029_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_12?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTA9E5B029_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_13?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(IndexCollection, Func<span id="LSTA9E5B029_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_14?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Int32, T<span id="LSTA9E5B029_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_15?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a>.
             However, an index partition is often initialized by inspecting a collection of 
             elements and adding a new part to the partition each time a new element is 
             encountered while iterating over the collection. 
             Such element is the identifier of the new part, which will store
             the positions, in the
             collection of elements, where reside values equal to the part identifier.
             As a consequence, the parts are mutually exclusive subsets of the 
             range of available collection positions.
             </p><p><b>Instantiation of IndexPartition&lt;T&gt; objects</b></p><p>
             The <span class="selflink">IndexPartition</span> class does not itself represent a partition. 
             Instead, it is 
             a class that provides the static method 
             <a href="M_Novacta_Analytics_IndexPartition_Create__1_1.htm">Create<span id="LSTA9E5B029_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_16?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTA9E5B029_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_17?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(IEnumerable<span id="LSTA9E5B029_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_18?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTA9E5B029_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_19?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a>
             for creating instances of the 
             <a href="T_Novacta_Analytics_IndexPartition_1.htm">IndexPartition<span id="LSTA9E5B029_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_20?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTA9E5B029_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_21?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> generic type.
             It also provides 
             method
             <a href="M_Novacta_Analytics_IndexPartition_Create.htm">Create(DoubleMatrix)</a>
             and its overloaded versions 
             that you can 
             call to instantiate partition objects 
             without having to explicitly specify the type of part identifiers
             when the type is <a href="https://docs.microsoft.com/dotnet/api/system.double" target="_blank">Double</a> or
             <a href="T_Novacta_Analytics_DoubleMatrixRow.htm">DoubleMatrixRow</a>.
             </p><p><b>Partition evaluations</b></p><p>
             In Cluster Analysis, data collecting individual observations 
             of multiple variables are partitioned in clusters trying to 
             minimize the dissimilarity among clusters, or to maximize the 
             similarity of the individuals in each cluster. 
             To obtain such optimizations, a linkage between two given parts 
             can be defined in terms of the pairwise distances of their observations,
             and linkage criterions can be applied to evaluate different partitions
             in the search for the optimal one. Some criterions are exposed in
             class <span class="selflink">IndexPartition</span> as methods 
             <a href="M_Novacta_Analytics_IndexPartition_MinimumCentroidLinkage.htm">MinimumMeanLinkage</a>,
             <a href="M_Novacta_Analytics_IndexPartition_DunnIndex.htm">DunnIndex</a>, and
             <a href="M_Novacta_Analytics_IndexPartition_DaviesBouldinIndex.htm">DaviesBouldinIndex</a>.
             </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
             In the following example, the row indexes of a matrix are partitioned 
             by the contents of its first column.
             Each part is identified by a value, the part identifier, and contains
             the indexes of the rows in which the identifier 
             is positioned in the first column.
            </p><p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAIFBA_tab1" class="codeSnippetContainerTabSingle">Partitioning the rows of a matrix by the contents of one of
             its columns</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAIFBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAIFBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAIFBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;

<span class="highlight-keyword">namespace</span> Novacta.Analytics.CodeExamples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> IndexPartitionExample0  
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Create a matrix.</span>
            <span class="highlight-keyword">var</span> data = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[<span class="highlight-number">18</span>] {
                <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,
                <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,
                <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,
                <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,
                <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,
                <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>
            }; 
            <span class="highlight-keyword">var</span> matrix = <span class="highlight-class-name">DoubleMatrix</span>.Dense(<span class="highlight-number">6</span>, <span class="highlight-number">3</span>, data, <span class="highlight-class-name">StorageOrder</span>.RowMajor);

            <span class="highlight-comment">// Partition the matrix row indexes by the contents of column 0:</span>
            <span class="highlight-comment">// a part is created for each distinct value in column 0.</span>
            <span class="highlight-keyword">var</span> partition = <span class="highlight-class-name">IndexPartition</span>.Create(matrix[<span class="highlight-literal">":"</span>, <span class="highlight-number">0</span>]);

            <span class="highlight-comment">// Each part is identified by its corresponding value and contains</span>
            <span class="highlight-comment">// the indexes of the rows in which the identifier</span>
            <span class="highlight-comment">// is positioned in column 0.</span>
            Console.WriteLine();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> identifier <span class="highlight-keyword">in</span> partition.Identifiers) {
                Console.WriteLine(<span class="highlight-literal">"Part identifier: {0}"</span>, identifier);
                Console.WriteLine(<span class="highlight-literal">"     indexes: {0}"</span>, partition[identifier]);
                Console.WriteLine();
            }
        }
    }
}

<span class="highlight-comment">// Executing method Main() produces the following output:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: 0</span>
<span class="highlight-comment">//      indexes: 0, 1, 2, 3</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: 1</span>
<span class="highlight-comment">//      indexes: 4, 5</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAIFBA");</script></p><p> 
             In the following example, the row indexes of a matrix are partitioned 
             by the contents of its rows.
             Each part is identified by a distinct row, the part identifier, and contains
             the indexes of the rows which are equal to the identifier.
             </p><p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAGFBA_tab1" class="codeSnippetContainerTabSingle">Partitioning the rows of a matrix by their contents</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAGFBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAGFBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAGFBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;

<span class="highlight-keyword">namespace</span> Novacta.Analytics.CodeExamples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> IndexPartitionExample1  
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Create a matrix.</span>
            <span class="highlight-keyword">var</span> data = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[<span class="highlight-number">18</span>] {
                <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,
                <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,
                <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,
                <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,
                <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,
                <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>
            };
            <span class="highlight-keyword">var</span> matrix = <span class="highlight-class-name">DoubleMatrix</span>.Dense(<span class="highlight-number">6</span>, <span class="highlight-number">3</span>, data, <span class="highlight-class-name">StorageOrder</span>.RowMajor);

            <span class="highlight-comment">// Partition the matrix row indexes by the contents of each row:</span>
            <span class="highlight-comment">// a part is created for each distinct row.</span>
            <span class="highlight-keyword">var</span> partition = <span class="highlight-class-name">IndexPartition</span>.Create(matrix.AsRowCollection());

            <span class="highlight-comment">// Each part is identified by its corresponding row and contains</span>
            <span class="highlight-comment">// the indexes of the rows which are equal to the identifier.</span>
            Console.WriteLine();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> identifier <span class="highlight-keyword">in</span> partition.Identifiers) {
                Console.WriteLine(<span class="highlight-literal">"Part identifier: {0}"</span>, identifier);
                Console.WriteLine(<span class="highlight-literal">"     indexes: {0}"</span>, partition[identifier]);
                Console.WriteLine();
            }
        }
    }
}

<span class="highlight-comment">// Executing method Main() produces the following output:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: 0                0                1                </span>
<span class="highlight-comment">//      indexes: 0, 1</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: 0                1                0                </span>
<span class="highlight-comment">//      indexes: 2, 3</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: 1                0                0                </span>
<span class="highlight-comment">//      indexes: 4, 5</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAGFBA");</script></p><p>
             In the following example, the linear indexes of a matrix are partitioned 
             by the sign of its entries.
             The part corresponding to zero entries is identified by zero, 
             the part corresponding to positive entries by 1, and the part of negative
             entries by -1.
             </p><p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAEFBA_tab1" class="codeSnippetContainerTabSingle">Partitioning the linear indexes of a matrix by the sign of its entries</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAEFBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAEFBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAEFBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;

<span class="highlight-keyword">namespace</span> Novacta.Analytics.CodeExamples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> IndexPartitionExample2  
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Create a matrix.</span>
            <span class="highlight-keyword">var</span> data = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[<span class="highlight-number">8</span>] {
                <span class="highlight-number">0</span>, <span class="highlight-number">1</span>,<span class="highlight-number">-2</span>,<span class="highlight-number">-3</span>,
                <span class="highlight-number">0</span>,<span class="highlight-number">-1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span>
            };
            <span class="highlight-keyword">var</span> matrix = <span class="highlight-class-name">DoubleMatrix</span>.Dense(<span class="highlight-number">2</span>, <span class="highlight-number">4</span>, data, <span class="highlight-class-name">StorageOrder</span>.RowMajor);

            <span class="highlight-comment">// Check the sign of its entries.</span>
            <span class="highlight-keyword">var</span> signs = <span class="highlight-class-name">DoubleMatrix</span>.Dense(matrix.NumberOfRows, matrix.NumberOfColumns);
            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; matrix.Count; i++) {
                signs[i] = Math.Sign(matrix[i]);
            }

            <span class="highlight-comment">// Partition the matrix linear indexes by the sign of each entry.</span>
            <span class="highlight-keyword">var</span> partition = <span class="highlight-class-name">IndexPartition</span>.Create(signs);

            <span class="highlight-comment">// The partition contains three parts, the zero part, identified by 0,</span>
            <span class="highlight-comment">// the negative part (identified by -1), and the positive one </span>
            <span class="highlight-comment">// (identified by 1).</span>
            Console.WriteLine();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> identifier <span class="highlight-keyword">in</span> partition.Identifiers) {
                Console.WriteLine(<span class="highlight-literal">"Part identifier: {0}"</span>, identifier);
                Console.WriteLine(<span class="highlight-literal">"     indexes: {0}"</span>, partition[identifier]);
                Console.WriteLine();
            }
        }
    }
}

<span class="highlight-comment">// Executing method Main() produces the following output:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: -1</span>
<span class="highlight-comment">//      indexes: 3, 4, 6</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: 0</span>
<span class="highlight-comment">//      indexes: 0, 1</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: 1</span>
<span class="highlight-comment">//      indexes: 2, 5, 7</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAEFBA");</script></p><p> 
             In the following example, the indexes of an array of strings are partitioned 
             by their contents.
             </p><p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAACFBA_tab1" class="codeSnippetContainerTabSingle">Partitioning the indexes of an array by its contents</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAACFBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAACFBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAACFBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;

<span class="highlight-keyword">namespace</span> Novacta.Analytics.CodeExamples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> IndexPartitionExample3  
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Create an array of strings.</span>
            <span class="highlight-keyword">var</span> data = <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[<span class="highlight-number">6</span>] {
                <span class="highlight-literal">"one"</span>,
                <span class="highlight-literal">"two"</span>,
                <span class="highlight-literal">"one"</span>,
                <span class="highlight-literal">"one"</span>,
                <span class="highlight-literal">"three"</span>,
                <span class="highlight-literal">"three"</span>
            };

            <span class="highlight-comment">// Partition the array positions by their contents.</span>
            <span class="highlight-keyword">var</span> partition = <span class="highlight-class-name">IndexPartition</span>.Create(data);

            <span class="highlight-comment">// The partition contains three parts, identified, respectively,</span>
            <span class="highlight-comment">// by the strings "one", "two", and "three".</span>
            Console.WriteLine();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> identifier <span class="highlight-keyword">in</span> partition.Identifiers) {
                Console.WriteLine(<span class="highlight-literal">"Part identifier: {0}"</span>, identifier);
                Console.WriteLine(<span class="highlight-literal">"     indexes: {0}"</span>, partition[identifier]);
                Console.WriteLine();
            }
        }
    }
}

<span class="highlight-comment">// Executing method Main() produces the following output:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: one</span>
<span class="highlight-comment">//      indexes: 0, 2, 3</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: three</span>
<span class="highlight-comment">//      indexes: 4, 5</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: two</span>
<span class="highlight-comment">//      indexes: 1</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAACFBA");</script></p><p>
             In the following example, the linear indexes of the main diagonal of
             a matrix are partitioned 
             by checking if their corresponding entries are less than 3 in absolute
             value.
             Two parts are created, one for diagonal
             entries less than 3 in absolute value, the other for 
             entries not satisfying that condition.
             </p><p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAAFBA_tab1" class="codeSnippetContainerTabSingle">Partitioning the main diagonal entries of a matrix by 
             their absolute value satisfying a certain condition</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAAFBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAAFBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAAFBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;

<span class="highlight-keyword">namespace</span> Novacta.Analytics.CodeExamples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> IndexPartitionExample5  
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Create a matrix.</span>
            <span class="highlight-keyword">var</span> data = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[<span class="highlight-number">16</span>] {
               <span class="highlight-number">-3</span>,  <span class="highlight-number">3</span>,  <span class="highlight-number">3</span>, <span class="highlight-number">-1</span>,
                <span class="highlight-number">0</span>,  <span class="highlight-number">2</span>, <span class="highlight-number">-2</span>,  <span class="highlight-number">2</span>,
                <span class="highlight-number">2</span>,  <span class="highlight-number">1</span>, <span class="highlight-number">-4</span>, <span class="highlight-number">-5</span>,  
               <span class="highlight-number">-8</span>,  <span class="highlight-number">2</span>,  <span class="highlight-number">7</span>, <span class="highlight-number">-1</span>
            };
            <span class="highlight-keyword">var</span> matrix = <span class="highlight-class-name">DoubleMatrix</span>.Dense(<span class="highlight-number">4</span>, <span class="highlight-number">4</span>, data, <span class="highlight-class-name">StorageOrder</span>.RowMajor);

            <span class="highlight-comment">// Create the collection of linear indexes corresponding</span>
            <span class="highlight-comment">// to entries on the matrix main diagonal.</span>
            <span class="highlight-keyword">var</span> diagonalIndexes = 
                <span class="highlight-class-name">IndexCollection</span>.Sequence(<span class="highlight-number">0</span>, <span class="highlight-number">1</span> + matrix.NumberOfRows, matrix.Count);

            <span class="highlight-comment">// Create a partitioner which returns true if</span>
            <span class="highlight-comment">// the absolute value in a entry having the specified linear</span>
            <span class="highlight-comment">// index is less than 3, otherwise false.</span>
            <span class="highlight-keyword">bool</span> partitioner(<span class="highlight-keyword">int</span> linearIndex)
            {
                <span class="highlight-keyword">return</span> Math.Abs(matrix[linearIndex]) &lt; <span class="highlight-number">3.0</span>;
            }

            <span class="highlight-comment">// Partition the diagonal linear indexes through the</span>
            <span class="highlight-comment">// specified partitioner.</span>
            <span class="highlight-keyword">var</span> partition = <span class="highlight-class-name">IndexPartition</span>.Create(diagonalIndexes, partitioner);

            <span class="highlight-comment">// Two parts are created, one for diagonal</span>
            <span class="highlight-comment">// entries less than 3 in absolute value, the other for </span>
            <span class="highlight-comment">// entries not satisfying that condition.</span>
            Console.WriteLine();
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> identifier <span class="highlight-keyword">in</span> partition.Identifiers) {
                Console.WriteLine(<span class="highlight-literal">"Part identifier: {0}"</span>, identifier);
                Console.WriteLine(<span class="highlight-literal">"     indexes: {0}"</span>, partition[identifier]);
                Console.WriteLine();
            }
        }
    }
}

<span class="highlight-comment">// Executing method Main() produces the following output:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: False</span>
<span class="highlight-comment">//      indexes: 0, 10</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// Part identifier: True</span>
<span class="highlight-comment">//      indexes: 5, 15</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAAFBA");</script></p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Novacta_Analytics.htm">Novacta.Analytics Namespace</a></div><div class="seeAlsoStyle"><a href="T_Novacta_Analytics_IndexPartition_1.htm">Novacta.Analytics<span id="LSTA9E5B029_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_22?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>IndexPartition<span id="LSTA9E5B029_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_23?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTA9E5B029_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_24?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></div><div class="seeAlsoStyle"><a href="T_Novacta_Analytics_Distance.htm">Novacta.Analytics<span id="LSTA9E5B029_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_25?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Distance</a></div><div class="seeAlsoStyle"><a href="T_Novacta_Analytics_DoubleMatrixRow.htm">Novacta.Analytics<span id="LSTA9E5B029_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_26?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>DoubleMatrixRow</a></div><div class="seeAlsoStyle"><a href="T_Novacta_Analytics_Clusters.htm">Novacta.Analytics<span id="LSTA9E5B029_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_27?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Clusters</a></div><div class="seeAlsoStyle"><a href="T_Novacta_Analytics_Advanced_PartitionOptimizationContext.htm">Novacta.Analytics.Advanced<span id="LSTA9E5B029_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA9E5B029_28?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>PartitionOptimizationContext</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright (c) Giovanni Lafratta</p> </div></body></html>